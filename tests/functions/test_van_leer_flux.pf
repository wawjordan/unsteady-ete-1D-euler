module test_van_leer_flux

  use set_precision,   only : prec
  use fluid_constants, only : gamma
  use set_inputs, only : i_low, i_high, ig_low, ig_high
  use flux_calc, only : flux_fun, select_flux
  use pfunit_mod

  implicit none

  real(prec), parameter :: toler = 1.0e-13_prec

  contains

  @test
    subroutine van_leer_flux_wall_test
      
      use set_inputs, only : flux_scheme
      
      real(prec), dimension(3,0:2) :: U
      real(prec), dimension(3,1) :: F_expected
      real(prec), dimension(3,0:1) :: F
      
      flux_scheme = 1
      call select_flux()
      
      i_low = 1
      ig_low = 0
      i_high = 1
      ig_high = 2
      
      U(1,0) = 1.225_prec
      U(2,0) = 0.0_prec
      U(3,0) = 253312.5_prec

      U(1,1) = 1.225_prec
      U(2,1) = 0.0_prec
      U(3,1) = 253312.5_prec
      
      U(1,2) = 1.225_prec
      U(2,2) = 0.0_prec
      U(3,2) = 253312.5_prec
      
      F_expected(1,1) = 0.0_prec
      F_expected(2,1) = 101325.0_prec
      F_expected(3,1) = 0.0_prec
      
      call flux_fun(U(:,0:1),U(:,1:2),F)
      
      write(*,*)
      write(*,*) 'zero velocity test case (van Leer):'
      write(*,*) 'F(1)     = ', F(1,0)
      write(*,*) 'F_exp(1) = ', F_expected(1,1)
      @assertequal(F_expected(1,1), F(1,0), toler)
      write(*,*) 'F(2)     = ', F(2,0)
      write(*,*) 'F_exp(2) = ', F_expected(2,1)
      @assertequal(1.0_prec, F(2,0)/F_expected(2,1), toler)
      write(*,*) 'F(3)     = ', F(3,0)
      write(*,*) 'F_exp(3) = ', F_expected(3,1)
      @assertequal(F_expected(3,1), F(3,0), toler)
      write(*,*) 'toler    = ', toler
      
    end subroutine van_leer_flux_wall_test
  
  @test
    subroutine van_leer_flux_supersonic_test
      
      use set_inputs, only : flux_scheme
      
      real(prec), dimension(3,0:2) :: U
      real(prec), dimension(3,1) :: F_expected
      real(prec), dimension(3,0:1) :: F
      
      flux_scheme = 1
      call select_flux()
      
      i_low = 1
      ig_low = 0
      i_high = 1
      ig_high = 2
      
      U(1,0) = 1.225_prec
      U(2,0) = 510.6536695593_prec
      U(3,0) = 917035.5796875_prec

      U(1,1) = 1.225_prec
      U(2,1) = 510.6536695593_prec
      U(3,1) = 917035.5796875_prec
      
      U(1,2) = 1.225_prec
      U(2,2) = 510.6536695593_prec
      U(3,2) = 917035.5796875_prec
      
      F_expected(1,1) = 510.6536695593_prec
      F_expected(2,1) = 537111.1593750_prec
      F_expected(3,1) = 517438309.9606_prec

      call flux_fun(U(:,0:1),U(:,1:2),F)

      write(*,*)
      write(*,*) 'supersonic test case (van Leer):'
      write(*,*) 'F(1)     = ', F(1,0)
      write(*,*) 'F_exp(1) = ', F_expected(1,1)
      @assertequal(1.0_prec, F(1,0)/F_expected(1,1), toler)
      write(*,*) 'F(2)     = ', F(2,0)
      write(*,*) 'F_exp(2) = ', F_expected(2,1)
      @assertequal(1.0_prec, F(2,0)/F_expected(2,1), toler)
      write(*,*) 'F(3)     = ', F(3,0)
      write(*,*) 'F_exp(3) = ', F_expected(3,1)
      @assertequal(1.0_prec, F(3,0)/F_expected(3,1), toler)
      write(*,*) 'toler    = ', toler
      
    end subroutine van_leer_flux_supersonic_test

end module test_van_leer_flux
