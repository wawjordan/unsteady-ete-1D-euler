module test_prim2cons

  use set_precision,       only : prec
  use fluid_constants,     only : gamma
  use variable_conversion, only : prim2cons
  use pfunit_mod

  implicit none

  real(prec), parameter :: toler = 1.0e-14_prec

  contains

  @test
    subroutine prim2cons_test

      real(prec), dimension(3,1) :: U
      real(prec), dimension(3,1) :: U_expected
      real(prec), dimension(3,1) :: V
      
      V(1,1) = 1.225_prec
      V(2,1) = 340.29399054347107_prec
      V(3,1) = 101325.0_prec

      U_expected(1,1) = 1.225_prec
      U_expected(2,1) = 4.168601384157521e+02_prec
      U_expected(3,1) = 3.242400000000001e+05_prec

      call prim2cons(U,V)

      write(*,*)
      write(*,*) 'U(1)     = ', U(1,1)
      write(*,*) 'U_exp(1) = ', U_expected(1,1)
      @assertequal(1.0_prec, U(1,1)/U_expected(1,1), toler, message='(density)')
      write(*,*) 'U(2)     = ', U(2,1)
      write(*,*) 'U_exp(2) = ', U_expected(2,1)
      @assertequal(1.0_prec, U(2,1)/U_expected(2,1), toler, message='(velocity)')
      write(*,*) 'U(3)     = ', U(3,1)
      write(*,*) 'U_exp(3) = ', U_expected(3,1)
      @assertequal(1.0_prec, U(3,1)/U_expected(3,1), toler, message='(pressure)')
      write(*,*) 'toler    = ', toler
      
    end subroutine prim2cons_test

end module test_prim2cons
