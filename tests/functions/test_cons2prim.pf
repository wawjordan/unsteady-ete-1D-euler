module test_cons2prim

  use set_precision,       only : prec
  use fluid_constants,     only : gamma
  use variable_conversion, only : cons2prim
  use pfunit_mod

  implicit none

  real(prec), parameter :: toler = 1.0e-14_prec

  contains

  @test
    subroutine cons2prim_test

      real(prec), dimension(3,1) :: U
      real(prec), dimension(3,1) :: V_expected
      real(prec), dimension(3,1) :: V
      
      U(1,1) = 1.225_prec
      U(2,1) = 416.8601384157521_prec
      U(3,1) = 3.242400000000001e+05_prec

      

      V_expected(1,1) = 1.225_prec
      V_expected(2,1) = 340.29399054347107_prec
      V_expected(3,1) = 101325.0_prec


      call cons2prim(U,V)

      write(*,*)
      write(*,*) 'V(1)     = ', V(1,1)
      write(*,*) 'V_exp(1) = ', V_expected(1,1)
      @assertequal(1.0_prec, V(1,1)/V_expected(1,1), toler, message='(density)')
      write(*,*) 'V(2)     = ', V(2,1)
      write(*,*) 'V_exp(2) = ', V_expected(2,1)
      @assertequal(1.0_prec, V(2,1)/V_expected(2,1), toler, message='(velocity)')
      write(*,*) 'V(3)     = ', V(3,1)
      write(*,*) 'V_exp(3) = ', V_expected(3,1)
      @assertequal(1.0_prec, V(3,1)/V_expected(3,1), toler, message='(pressure)')
      write(*,*) 'toler    = ', toler
      
    end subroutine cons2prim_test

end module test_cons2prim
